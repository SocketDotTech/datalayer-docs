"use strict";(self.webpackChunkdatalayer_docs=self.webpackChunkdatalayer_docs||[]).push([[1377],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,s={unversionedId:"Learn/Ownership",id:"Learn/Ownership",title:"Ownership",description:"We strongly believe that contracts should be immutable, non-upgradable, upgrades should be opt-in by clients. We have clear roles on the contract and plans on how to remove them. All roles are listed in the AccessRoles.sol contract",source:"@site/docs/Learn/Ownership.md",sourceDirName:"Learn",slug:"/Learn/Ownership",permalink:"/Learn/Ownership",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Off-Chain Agents",permalink:"/Learn/OffChain-Agents"}},l={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We strongly believe that contracts should be immutable, non-upgradable, upgrades should be opt-in by clients. We have clear roles on the contract and plans on how to remove them. All roles are listed in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SocketDotTech/socket-DL/blob/master/contracts/utils/AccessRoles.sol"},"AccessRoles.sol contract")),(0,a.kt)("p",null,"Here are some of the roles and the purpose:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RESCUE_ROLE"),": It's only used to rescue funds if stuck in a contract which isnt supposed to hold funds. This is just a safety role to allow us to give back people their ERC20s or ETHER that they might have accidentally sent."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WITHDRAW_ROLE"),": We haven't built a permissionless way to execute fee distribution via TransmitManager, ExecutionManager and Switchboard yet, hence we have this special role to allow us to withdraw and distribute the fees. This role will deprecate once the fee distribution logic is on-chain. This does not impact the security implications for the end user and only affects the off-chain agents."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EXECUTOR_ROLE"),": This role whitelists addresses to allow them to execute messages post permissionless validation by the switchboard. This role is currently permissioned to prevent users from harmful effects of REV. This role holds no security implications."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TRANSMITTER_ROLE"),": This role is not part of Socket protocol. This role is used by TransmitManager to grant approval to a particular transmitter to seal and propose packets. TransmitterManager is a modular contract. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GOVERNANCE_ROLE"),": This one is an interesting one. The role is minimally used by intention. This role CANNOT UPDATE the security properties of a message and or modify user preferences. This role is minimally used in the core-contracts to update the ",(0,a.kt)("inlineCode",{parentName:"li"},"TransmitManager")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"ExecutionManager")," modules, both of which cannot harm the end developer and in the worst case just pause the protocol as the current ",(0,a.kt)("inlineCode",{parentName:"li"},"TransmitManager")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"ExecutionManager")," modules are implemented. Apart from the core-contracts, the GOVERNANCE_ROLE can be utilised with a different setting in the switchboards but switchboards are permissionless already and developers can remove or update the usage of the role according to their preferences."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TRIP_ROLE"),": This role allows holder to trip or pause a ",(0,a.kt)("inlineCode",{parentName:"li"},"Switchboard"),", in case of smart contract bugs on a specific ",(0,a.kt)("inlineCode",{parentName:"li"},"Switchboard")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UN_TRIP_ROLE"),": This role allows holder to untrip or unpause a ",(0,a.kt)("inlineCode",{parentName:"li"},"Switchboard")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WATCHER_ROLE"),": Role assigned to ",(0,a.kt)("inlineCode",{parentName:"li"},"Switchboard")," watchers. Watchers play different a different role depending on the Switchboard used. For example, in Optimistic Switchboards, Watchers can trip a specific path/packet if any fraud was detected."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FEES_UPDATER_ROLE"),": Role assigned to off-chain agents that update gas fees for each siblingChain on a given switchboard, TransmitManager and ExecutionManager")))}u.isMDXComponent=!0}}]);