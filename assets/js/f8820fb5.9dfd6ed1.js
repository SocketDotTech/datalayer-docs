"use strict";(self.webpackChunkdatalayer_docs=self.webpackChunkdatalayer_docs||[]).push([[3456],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=i,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={id:"example-uniERC721",title:"Universal ERC721",sidebar_position:2},o=void 0,l={unversionedId:"Build/ExampleSection/example-uniERC721",id:"Build/ExampleSection/example-uniERC721",title:"Universal ERC721",description:"Universal ERC-721 is an extension of ERC-721 token standard with cross-chain transfer capabilities, built on top of SocketDL.",source:"@site/docs/Build/ExampleSection/uniERC721.md",sourceDirName:"Build/ExampleSection",slug:"/Build/ExampleSection/example-uniERC721",permalink:"/Build/ExampleSection/example-uniERC721",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"example-uniERC721",title:"Universal ERC721",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Universal ERC20",permalink:"/Build/ExampleSection/example-uniERC20"},next:{title:"More Examples",permalink:"/Build/ExampleSection/dl-examples"}},s={},c=[],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Universal ERC-721 is an extension of ERC-721 token standard with cross-chain transfer capabilities, built on top of SocketDL."),(0,i.kt)("p",null,"You can find the example on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SocketDotTech/socketDL-examples/blob/main/src/universalTokens/uniERC721/uniERC721.sol"},"GitHub"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"\n    /* Transfers tokens between chains */\n    function uniTransfer(\n        uint256 _destChainSlug,\n        address _destReceiver,\n        uint256 tokenId\n    ) external payable {\n        _burn(tokenId);\n\n        bytes memory payload = abi.encode(msg.sender, _destReceiver, tokenId);\n\n        ISocket(socket).outbound{value: msg.value}(\n            _destChainSlug,\n            destGasLimits[_destChainSlug],\n            bytes32(0),\n            bytes32(0),\n            payload\n        );\n\n        emit UniTransfer(_destChainSlug, _destReceiver, tokenId);\n    }\n\n    function _uniReceive(\n        uint256 _siblingChainSlug,\n        address _sender,\n        address _receiver,\n        uint256 _tokenId\n    ) internal {\n        _safeMint(_receiver, _tokenId);\n\n        emit UniReceive(_sender, _receiver, _tokenId, _siblingChainSlug);\n    }\n\n")))}d.isMDXComponent=!0}}]);