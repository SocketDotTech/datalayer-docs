"use strict";(self.webpackChunkdatalayer_docs=self.webpackChunkdatalayer_docs||[]).push([[3812],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),h=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=h(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=h(n),p=i,f=u["".concat(s,".").concat(p)]||u[p]||d[p]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var h=2;h<a;h++)o[h]=n[h];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var r=n(7462),i=(n(7294),n(3905));const a={},o=void 0,c={unversionedId:"dev-resources/Interfaces/ISwitchboard",id:"dev-resources/Interfaces/ISwitchboard",title:"ISwitchboard",description:"Switchboards are required to have this interface to interact with Socket",source:"@site/docs/dev-resources/Interfaces/ISwitchboard.md",sourceDirName:"dev-resources/Interfaces",slug:"/dev-resources/Interfaces/ISwitchboard",permalink:"/dev-resources/Interfaces/ISwitchboard",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"ISocket",permalink:"/dev-resources/Interfaces/ISocket"},next:{title:"Fast",permalink:"/dev-resources/MessagingLatency/latency-fast"}},s={},h=[],l={toc:h},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Switchboards are required to have this interface to interact with Socket"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// SPDX-License-Identifier: GPL-3.0-only\npragma solidity 0.8.19;\n\n/**\n * @title ISwitchboard\n * @dev The interface for a switchboard contract that is responsible for verification of packets between\n * different blockchain networks.\n */\ninterface ISwitchboard {\n    /**\n     * @notice Registers itself in Socket for given `siblingChainSlug_`.\n     * @dev This function is expected to be only called by admin as it handles the capacitor config for given chain\n     * @param siblingChainSlug_ The slug of the sibling chain to register switchboard with.\n     * @param maxPacketLength_ The maximum length of a packet allowed by the switchboard.\n     * @param capacitorType_ The type of capacitor that the switchboard uses.\n     * @param initialPacketCount_ The packet count at the time of registering switchboard. Packets with packet count below this won't be allowed\n     * @param siblingSwitchboard_ The switchboard address deployed on `siblingChainSlug_`\n     */\n    function registerSiblingSlug(\n        uint32 siblingChainSlug_,\n        uint256 maxPacketLength_,\n        uint256 capacitorType_,\n        uint256 initialPacketCount_,\n        address siblingSwitchboard_\n    ) external;\n\n    /**\n     * @notice Updates the sibling switchboard for given `siblingChainSlug_`.\n     * @dev This function is expected to be only called by admin\n     * @param siblingChainSlug_ The slug of the sibling chain to register switchboard with.\n     * @param siblingSwitchboard_ The switchboard address deployed on `siblingChainSlug_`\n     */\n    function updateSibling(\n        uint32 siblingChainSlug_,\n        address siblingSwitchboard_\n    ) external;\n\n    /**\n     * @notice Checks if a packet can be allowed to go through the switchboard.\n     * @param root the packet root.\n     * @param packetId The unique identifier for the packet.\n     * @param proposalCount The unique identifier for a proposal for the packet.\n     * @param srcChainSlug The unique identifier for the source chain of the packet.\n     * @param proposeTime The time when the packet was proposed.\n     * @return A boolean indicating whether the packet is allowed to go through the switchboard or not.\n     */\n    function allowPacket(\n        bytes32 root,\n        bytes32 packetId,\n        uint256 proposalCount,\n        uint32 srcChainSlug,\n        uint256 proposeTime\n    ) external view returns (bool);\n\n    /**\n     * @notice Retrieves the minimum fees required for the destination chain to process the packet.\n     * @param dstChainSlug the unique identifier for the destination chain of the packet.\n     * @return switchboardFee the switchboard fee required for the destination chain to process the packet.\n     * @return verificationOverheadFees the verification fee required for the destination chain to process the packet.\n     */\n    function getMinFees(\n        uint32 dstChainSlug\n    )\n        external\n        view\n        returns (uint128 switchboardFee, uint128 verificationOverheadFees);\n\n    /**\n     * @notice Receives the fees for processing of packet.\n     * @param siblingChainSlug_ the chain slug of the sibling chain.\n     */\n    function receiveFees(uint32 siblingChainSlug_) external payable;\n\n    /**\n     * @notice Sets the minimum fees required for the destination chain to process the packet.\n     * @param nonce_ the nonce of fee Updater to avoid replay.\n     * @param dstChainSlug_ the unique identifier for the destination chain.\n     * @param switchboardFees_ the switchboard fee required for the destination chain to process the packet.\n     * @param verificationOverheadFees_ the verification fee required for the destination chain to process the packet.\n     * @param signature_ the signature of the request.\n     * @dev not important to override in all switchboards\n     */\n    function setFees(\n        uint256 nonce_,\n        uint32 dstChainSlug_,\n        uint128 switchboardFees_,\n        uint128 verificationOverheadFees_,\n        bytes calldata signature_\n    ) external;\n}\n")))}d.isMDXComponent=!0}}]);