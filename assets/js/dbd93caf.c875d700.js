"use strict";(self.webpackChunkdatalayer_docs=self.webpackChunkdatalayer_docs||[]).push([[2648],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),u=n,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return a?r.createElement(h,i(i({ref:t},p),{},{components:a})):r.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9424:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={id:"glossary",title:"Glossary",sidebar_position:1},i=void 0,s={unversionedId:"Learn/glossary",id:"Learn/glossary",title:"Glossary",description:"We have introduced a lot of new terms and that is by design. We think for something as critical as AMB's nothing should be assumed or taken for-granted. We think these new terms are accurate and will encourage people to look into the docs/code and discourage assumptions.",source:"@site/docs/Learn/glossary.md",sourceDirName:"Learn",slug:"/Learn/glossary",permalink:"/Learn/glossary",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"glossary",title:"Glossary",sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Learn about DL",permalink:"/category/learn-about-dl"},next:{title:"Protocol Design",permalink:"/Learn/protocol-design"}},l={},c=[],p={toc:c},d="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"We have introduced a lot of new terms and that is by design. We think for something as critical as AMB's nothing should be assumed or taken for-granted. We think these new terms are accurate and will encourage people to look into the docs/code and discourage assumptions."),(0,n.kt)("p",null,"Here is a quick run-down of some of the terms that you will come across the entire documentation:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Socket"),": Socket is the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/SocketDotTech/socket-DL/blob/master/contracts/socket/Socket.sol"},"core contract")," deployed on all networks that are supported. All core modules and functions exist within Socket"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Plug/Plugs"),": Plugs are smart contract applications that connect with Socket to send and receive cross-chain messages via the ",(0,n.kt)("a",{parentName:"li",href:"/dev-resources/Interfaces/IPlug"},"IPlug interface"),". Plugs are generally adapter contracts that connect your main Smart contract to the messaging infrastructure."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Message"),": Message is the payload you want to transmit along with relavent meta-data like destination chainSlug etc. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Packet"),": Packets are a collection of messages sent from one chain to another. The validity of messages in a packet is verified on the destination chain based on the logic prescribed in the configured switchboard. ",(0,n.kt)("a",{parentName:"li",href:"/Learn/Components/Packet"},"Read more"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Sealed Packet"),': As soon as the transmitter seals the packet on the source-chain with their signature it\'s called "SealedPacket". Read more about how transmitters work ',(0,n.kt)("a",{parentName:"li",href:"/Learn/lifecycle#sending-a-message"},"here"),". "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Capacitor"),": Capacitor is responsibile for storing messages in the form of a Packet. The packet is released when the transmitter calls the ",(0,n.kt)("inlineCode",{parentName:"li"},"sealPacket")," method on the capacitor. Capacitors allow for native batching of payloads for better gas-performance. ",(0,n.kt)("a",{parentName:"li",href:"/Learn/Components/Capacitors"},"Read more"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Switchboard"),": Switchboards are the authenticaion/verification modules that allow developers to have custom verification for their payloads/messages. They can be permissionlessly built and deployed by the community. ",(0,n.kt)("a",{parentName:"li",href:"/Learn/Components/Switchboards"},"Read more")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Transmitter"),": Transmitters are the entities responsible for transmission of Packet across layers, their activity is completely on-chain and managed by TransmitManager. ",(0,n.kt)("a",{parentName:"li",href:"/Learn/Components/TransmitManager"},"Read more")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ChainSlug"),": ChainSlug is a unique identifier for a particular network or Socket deployment. It's different than Chain ID or Network ID used on EVM networks. You can find the assigned ChainSlugs in the ",(0,n.kt)("a",{parentName:"li",href:"/dev-resources/deployment-addresses"},"deployments section"))))}m.isMDXComponent=!0}}]);