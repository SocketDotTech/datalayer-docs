"use strict";(self.webpackChunkdatalayer_docs=self.webpackChunkdatalayer_docs||[]).push([[9199],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7477:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={id:"receiving",title:"Receiving messages",sidebar_position:3},o=void 0,l={unversionedId:"Build/contract-setup/receiving",id:"Build/contract-setup/receiving",title:"Receiving messages",description:"Plugs on destination network need to implement inbound() to handle incoming messages.",source:"@site/docs/Build/contract-setup/receiving.md",sourceDirName:"Build/contract-setup",slug:"/Build/contract-setup/receiving",permalink:"/Build/contract-setup/receiving",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"receiving",title:"Receiving messages",sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Sending messages",permalink:"/Build/contract-setup/sending"},next:{title:"Testing integration",permalink:"/Build/testing-dl"}},c={},s=[],u={toc:s},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Plugs on destination network need to implement ",(0,a.kt)("inlineCode",{parentName:"p"},"inbound()")," to handle incoming messages."),(0,a.kt)("p",null,"Socket calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"inbound")," function on the destination Plug when sending the payload. The ",(0,a.kt)("inlineCode",{parentName:"p"},"inbound()")," should follow the interface mentioned in the interface mentioned here. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"interface IPlug {\n    /**\n     * @notice executes the message received from source chain\n     * @dev this should be only executable by socket\n     * @param siblingChainSlug_ chain slug of source\n     * @param payload_ the data which is needed by plug at inbound call on destination\n     */\n    function inbound(\n        uint32 siblingChainSlug_,\n        bytes calldata payload_\n    ) external;\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Only ",(0,a.kt)("a",{parentName:"p",href:"/dev-resources/deployment-addresses"},(0,a.kt)("inlineCode",{parentName:"a"},"Socket"))," on a given chain should be allowed to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"inbound")," method on a Plug as seen in the example below.")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Your Plug on the destination network can look something like below. In the below snippet we assume the payload is a ",(0,a.kt)("inlineCode",{parentName:"p"},"uint256"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'    uint256 number;\n\n    function inbound(\n        uint32 siblingChainSlug_,\n        bytes calldata payload_\n        ) external payable {\n            // Make sure the caller is Socket contract only\n            require(msg.sender == address(socket), "Not Socket");\n\n            // you can do anything in this function\n            // payload can be decoded to do anything\n            number = abi.decode(payload)\n    }\n')))}p.isMDXComponent=!0}}]);