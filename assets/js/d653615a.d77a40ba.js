"use strict";(self.webpackChunkdatalayer_docs=self.webpackChunkdatalayer_docs||[]).push([[4908],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,h=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={id:"example-counter",title:"Counter Tutorial",sidebar_position:2},l=void 0,i={unversionedId:"dev-resources/TutorialSection/example-counter",id:"dev-resources/TutorialSection/example-counter",title:"Counter Tutorial",description:"In this tutorial, we'll explore how to build and deploy a cross-chain counter. The cross-chain counter lets users update the value of the counter on one chain from another.",source:"@site/docs/dev-resources/TutorialSection/Counter.md",sourceDirName:"dev-resources/TutorialSection",slug:"/dev-resources/TutorialSection/example-counter",permalink:"/dev-resources/TutorialSection/example-counter",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"example-counter",title:"Counter Tutorial",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Tutorials",permalink:"/category/tutorials"},next:{title:"Message Failure & Retry",permalink:"/dev-resources/TutorialSection/retry-execute"}},u={},s=[{value:"Code Walkthrough",id:"code-walkthrough",level:3},{value:"Setup",id:"setup",level:3},{value:"Local Environment (Foundry)",id:"local-environment-foundry",level:4},{value:"Remix",id:"remix",level:4},{value:"Constructor Arguments",id:"constructor-arguments",level:4},{value:"Configuring Plugs",id:"configuring-plugs",level:3},{value:"Setting Counter value on remote chain",id:"setting-counter-value-on-remote-chain",level:3},{value:"Tracking status of message",id:"tracking-status-of-message",level:3},{value:"Message delivery to set Counter value",id:"message-delivery-to-set-counter-value",level:3}],p={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this tutorial, we'll explore how to build and deploy a cross-chain counter. The cross-chain counter lets users update the value of the counter on one chain from another."),(0,r.kt)("h3",{id:"code-walkthrough"},"Code Walkthrough"),(0,r.kt)("p",null,"You can find the code for this tutorial in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SocketDotTech/socketDL-examples"},(0,r.kt)("inlineCode",{parentName:"a"},"SocketDL-examples"))," GitHub repo. This example inherits the ",(0,r.kt)("inlineCode",{parentName:"p"},"PlugBase")," contract, which is a boilerplate contract with key functions {WIP: Link it} needed to interact with Socket. Plugs may use PlugBase to abstract these functions, or directly define them in their contract."),(0,r.kt)("p",null,"The Cross-chain Counter has 2 key functions : "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setRemoteNumber")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"setRemoteNumber takes ",(0,r.kt)("inlineCode",{parentName:"li"},"newNumber")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"toChainSlug")," parameters. This function calls ",(0,r.kt)("inlineCode",{parentName:"li"},"outbound")," method on Socket which initiates the cross-chain message to update the counter value on the destination chain")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"   /* \n     newNumber_ is the value the counter will be set to\n     toChainSlug_ is the chain ID of the destination chain\n   */\n    function setRemoteNumber(\n        uint256 newNumber_,\n        uint256 toChainSlug_\n    ) external payable {\n        _outbound(toChainSlug_, destGasLimit, msg.value, abi.encode(newNumber_));\n    }\n\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_receiveInbound")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Socket calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"inbound")," function on PlugBase when relaying messages on destination chain. ",(0,r.kt)("inlineCode",{parentName:"p"},"inbound")," calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"_receiveInbound")," method which decodes the number from the payload and sets the local chain counter value to the number received in the message. More on this in message receiving lifecycle."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function inbound(\n  uint256 siblingChainSlug_,\n  bytes calldata payload_\n) external payable {\n  require(msg.sender == address(socket), "no auth");\n  _receiveInbound(siblingChainSlug_, payload_);\n}\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"    function _receiveInbound(\n    uint256,\n    bytes memory payload_\n) internal virtual override {\n    uint256 newNumber = abi.decode(payload_, (uint256));\n    setNumber(newNumber);\n}\n")))),(0,r.kt)("h3",{id:"setup"},"Setup"),(0,r.kt)("h4",{id:"local-environment-foundry"},"Local Environment (Foundry)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clone the GitHub repo and run ",(0,r.kt)("inlineCode",{parentName:"li"},"forge install")),(0,r.kt)("li",{parentName:"ul"},"To compile and deploy the ",(0,r.kt)("inlineCode",{parentName:"li"},"Counter")," example, run the following command",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"forge create --rpc-url <RPC> \\\n--constructor-args <SOCKET_CONTRACT_ADDRESS> \\\n--private-key <PRIVATE_KEY> \\\nsrc/impl/Counter.sol:Counter\n")))),(0,r.kt)("h4",{id:"remix"},"Remix"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The counter example can be loaded onto Remix from ",(0,r.kt)("a",{parentName:"li",href:"https://remix.ethereum.org/#url=https://github.com/SocketDotTech/socketDL-examples/blob/templates/src/impl/Counter.sol&lang=en&optimize=false&runs=200&evmVersion=null&version=soljson-v0.5.0+commit.1d4f565a.js&language=Solidity"},"here"))),(0,r.kt)("h4",{id:"constructor-arguments"},"Constructor Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The counter example takes ",(0,r.kt)("a",{parentName:"p",href:"/Learn/protocol-design#socket"},(0,r.kt)("inlineCode",{parentName:"a"},"Socket"))," address as an argument, which can be found in ",(0,r.kt)("a",{parentName:"p",href:"/dev-resources/deployment-addresses"},(0,r.kt)("inlineCode",{parentName:"a"},"deployments"))),(0,r.kt)("p",{parentName:"li"},"This example can be deployed on any ",(0,r.kt)("a",{parentName:"p",href:"/dev-resources/deployment-addresses"},"supported testnets or mainnets"),". In this tutorial, we'll be deploying the Counters on the following two chains, Polygon and Optimism :"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Chain"),(0,r.kt)("th",{parentName:"tr",align:null},"Socket address"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"137"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x4c8D9ab0F4f6A959092248982bd58D2C964957d6"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x2959eBC446A4dFB30b04AfD62B0cBD3F914306B4"))))))),(0,r.kt)("h3",{id:"configuring-plugs"},"Configuring Plugs"),(0,r.kt)("p",null,"As described in the Getting Started section, Plugs must connect to Socket before they can send/receive messages between one another. After deploying the ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," contract on Polygon and Optimism, we need to initiate a ",(0,r.kt)("inlineCode",{parentName:"p"},"connect()")," transaction on respective chains."),(0,r.kt)("p",null,"The script for making this transaction can be found here. This step calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method on Socket with the following parameters. {WIP: Link it}"),(0,r.kt)("p",null,"For Polygon, the values are :"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"siblingChainSlug"),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"siblingPlug"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of Counter on Optimism")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"inboundSwitchboard"),(0,r.kt)("td",{parentName:"tr",align:null},"0x2521b29FD8d3787Ab42141f55F6b462E6115C737")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"outboundSwitchboard"),(0,r.kt)("td",{parentName:"tr",align:null},"0x2521b29FD8d3787Ab42141f55F6b462E6115C737")))),(0,r.kt)("p",null,"For Optimism, the values are :"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"siblingChainSlug"),(0,r.kt)("td",{parentName:"tr",align:null},"137")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"siblingPlug"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of Counter on Polygon")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"inboundSwitchboard"),(0,r.kt)("td",{parentName:"tr",align:null},"0x8654cB74011C9972dd63Ed691d310e1BAA85Fe9E")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"outboundSwitchboard"),(0,r.kt)("td",{parentName:"tr",align:null},"0x8654cB74011C9972dd63Ed691d310e1BAA85Fe9E")))),(0,r.kt)("p",null,"  This ",(0,r.kt)("a",{parentName:"p",href:"/Learn/lifecycle#connecting-to-socket"},"connection")," is required on each respective chain a Plug receives/sends messages between. Once the connection step is complete, you can verify the connection was successful by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"getPlugConfig")," method on ",(0,r.kt)("a",{parentName:"p",href:"/dev-resources/deployment-addresses"},"Socket"),". This is a view function that returns the config of the plug."),(0,r.kt)("h3",{id:"setting-counter-value-on-remote-chain"},"Setting Counter value on remote chain"),(0,r.kt)("p",null,"For this tutorial, we'll be setting ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," value on Polygon to 55 from Optimism. To do this, we call the ",(0,r.kt)("inlineCode",{parentName:"p"},"setRemoteNumber()")," function on our Counter deployed on Polygon. The script for making this transaction can be found here."),(0,r.kt)("p",null,"// Script will be here as well"),(0,r.kt)("p",null,"The parameter values when calling this function on Optimism are : "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newNumber_"),(0,r.kt)("td",{parentName:"tr",align:null},"55")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"toChainSlug_"),(0,r.kt)("td",{parentName:"tr",align:null},"137")))),(0,r.kt)("p",null,"This sends a message payload from Optimism to Polygon with the number 55 encoded in payload. This number is decoded from the payload on the destination ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," and set as the new Counter value."),(0,r.kt)("h3",{id:"tracking-status-of-message"},"Tracking status of message"),(0,r.kt)("p",null,"To track the status of any outbound message can be tracked with the status API. Learn more in the Status API {WIP : link it}"),(0,r.kt)("h3",{id:"message-delivery-to-set-counter-value"},"Message delivery to set Counter value"),(0,r.kt)("p",null,"Once the ",(0,r.kt)("a",{parentName:"p",href:"/Learn/lifecycle#switchboards-101"},"packet is verified"),", Socket sends the message payload to the remote ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," on Polygon. It calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"inbound")," function on the remote ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter"),", which decodes the newNumber from the payload and sets it on the local chain. Find a detailed explanation of this in the ",(0,r.kt)("a",{parentName:"p",href:"/Learn/lifecycle#receiving-a-message"},"Receiving message lifecycle"),"."),(0,r.kt)("p",null,"The value of ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," on Polygon can be checked using this script\n// Add script to check the new counter value"),(0,r.kt)("p",null,"Once the payload is sent to the remote ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter"),", message execution is marked complete."),(0,r.kt)("admonition",{title:"You're Plugged!",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You've successfully built and deployed a Plug! Explore more examples & participate in Surge!")))}d.isMDXComponent=!0}}]);